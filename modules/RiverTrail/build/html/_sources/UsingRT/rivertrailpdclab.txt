Using River Trail to Parallelize Javascript
=============================================

Installing River Trail
----------------------

On a Windows 7 or OS X machine, open Firefox, and check the version. This can be a public machine that you do not have administrative access to.

On Windows
""""""""""

A. On windows, first download and install `the intel OpenCL
sdk <http://software.intel.com/en-us/vcsource/tools/opencl-sdk>`_

Then install `the River Trail
Plugin <https://github.com/RiverTrail/RiverTrail/wiki/downloads>`_
appropriate for your version of firefox

(if you are on nightly, you may have to downgrade to version 20)

Then move on to step 2

B. On OSX you only need to install the firefox plugin for
`River Trail <https://github.com/RiverTrail/RiverTrail/wiki/downloads>`_

Go to step 2

C. If you are on linux, you can try compiling the plugin yourself, but
thats tricky...

2. Install firebug: `https://getfirebug.com/ <https://getfirebug.com/>`_

This is web development debugger and general purpose console tool

It should install the proper version on its own

This is needed to do code timings the nice way

3. Open the `interpreter <http://rivertrail.github.io/interactive/>`_

Make sure that the right hand window has the text “Enabling Parallel
Mode” to be sure
that the addon and opencl lib are installed correctly

4. Try each of the example statements from the left-hand window to get a
feel for each call

Note constructor function for ParallelArray

The example uses a literal for the array it changes to ParallelArray

but you can use something like:

var a = [0,2,4,5,6]; //if you want to

var b = new ParallelArray(a);

Note the reduce call at the bottom which calls a function ‘sum’ to sum
all elements

Check out the
`documentation <https://github.com/RiverTrail/RiverTrail/wiki/ParallelArray>`_
for an explanation of each arg (scroll down for methods)

5. Download the lab exercise from the emails I sent out to the cs300
alias:

There should be two files in one email:

1 HTML file which has a super simple interface

If you aren’t running this on a webserver, you need to add a protocol to
the

jquery include, change:

<script
src="//ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>

to

<script
src="http://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>

2. A javascript file to modify

Download these into the same dir, and unzip them(if they are zipped)

Then there should also be a series of datafiles in another email:

Each contains a different number of lines from the movData Movielens
dataset

6. Open the html file in firefox, and try pasting a paragraph or more of
text into the input box

A. Then click the ‘Run Word Count’ button and see the results

B.Now open the MapRedux.js file in an editor, and look at the function
‘p’

Note the calls to create a new ParallelArray, to map, and then the
reduce call

In a README.txt file:

Copy the call to ‘scatter’,

and using the documentation, explain what this function is doing.

In your readme, also explain how this is different than reduce

C. Now lets add some timing code

When you have firebug installed you can add a timer with a name like so:

console.time(“timerName”)

and close the timer like this:

console.timeEnd(“timerName”)

Add the timer code around the calls to map and scatter

assign the return of console.timeEnd(“timerName”) to a variable like
this:

var timed = console.timeEnd(“timerName”) to a variable

Then add that variable to the output string (see comments for hints)

rstr += ‘<p>’+timed+’</p>’;

D. With the timing code in place, test inputs of various sizes

copy the word count, and time in ms to your readme

do 3 runs:

one with a paragraph

one with about a page

one with several pages

7. Now lets try the average rating function

A. Open one of the movie lense text files, copy everything, and paste it
into the input box

Hit the ‘Run Average’ button, and view the results

This gives us how long it took total, but doesn’t tell us how many
ratings there were

B. In the function ‘q’, read the comments to get a feel for what is
happening

Then go to the for-in loop

Find the line where we add the data for each id to an output string

Add another table-data element within the row

(after the </td> but before </tr>)

containing the number of ratings for that id,

‘<td>’+aValueLikeRatings.length+’</td>’

Dont forget to balance the rows (see comment)

This gives you the number of ratings per id, lets add total number of
ratings

You can skip this if you like, it will match the number of lines

declare a var outside the for-in

var collecta = 0;

within the for-in

collecta += ratings.length;

Add this in a <p> before the table (like the timer)

Now time each of the different sized files

Copy the time, and the number of ratings into your readme

C. Now lets get average rating per movie, instead of by user-id

In the for loop that copies bigArr into smArr,

we add keys to an object when they don’t already exist (bucketing)

when the key does exist, we add the rating for that key to a string

This gives unique keys, with their accompanying values

Note the ordering of the values

Change the operation to add the movie-id to the object instead of
user-id

think smArr[j+1] instead of smArr[j]....

rerun your datasets, and record times

Are the times different? If so, why do you think it was different?

8. Submit your readme and MapRedux.js to hwsubmit.cs300

Also email to `blackhan@stolaf.edu <mailto:blackhan@stolaf.edu>`_ with
your system config (cores, ram, os)


